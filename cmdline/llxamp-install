#!/bin/bash

source /usr/lib/llxamp/environ-cmdline

help_menu(){
    echo
    echo "Usage:"
    echo
    echo "$program [-p <file_pack>] [-t <target>] [-f] [-h]"
    echo "  -f: force overwrite target"
    echo "  -h: this help"
    echo "  defaults:"
    echo "    <file_pack>: $file_pack"
    echo "    <target>: $rptarget"
    echo
}

error_menu(){
    echo
    echo Error $1
    help_menu
    exit 1
}

execute(){
    $@
    if [ $? -ne 0 ]; then
        echo "Error executing '$@', aborting operation"
        exit 1
    fi
}

execute_to_tempfile(){
    tmpfile=$(mktemp)
    $@ > $tmpfile
    if [ $? -ne 0 ]; then
        echo "Error executing '$@', aborting operation"
        exit 1
    fi
    echo "$tmpfile"
}

execute_silent(){
    $@ >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "Error executing '$@', aborting operation"
        exit 1
    fi
}

make_change_text(){
    echo Patching text files
    export LC_ALL=C
    components="httpd php mysql"
    [ ! -e "$rptarget" ] && error_menu "invalid target"
    pushd $rptarget >/dev/null

    for component in $components; do
        found=$(execute egrep -Ilor "$TAG" $component)
        if [ $? -eq 0 -a -n "$found" ];then
            found=($(echo $found |xargs -n1 |sort|uniq))
            for file in ${found[@]}; do
                cp "$file" "$file.pre-change"
                sed -r "s|$TAG|$rptarget|g" "$file.pre-change" > "$file"
            done
        fi
    done
    find $rptarget -name '*.pre-change' -exec rm {} \;
    popd > /dev/null
}

make_change_bin(){
    echo Patching binary files
    export LC_ALL=C
    components="httpd php"
    [ ! -e "$rptarget" ] && error_menu "invalid target"
    pushd $rptarget >/dev/null
    declare -a found_bins_with_tag
    for component in $components; do
        found_bins=$(execute find $component -type f -not \( -name '*.png' -o -name '*.gif' -o -name '*.mo' -o -name '*.z' -o -name '*.ico' \) -exec grep . -IL "{}" \;)
        if [ $? -eq 0 -a -n "$found_bins" ];then
            found_bins=($(echo $found_bins |xargs -n1 |sort|uniq))
            for file in ${found_bins[@]}; do
                found_tag=$(grep -ol "$TAG" "$file")
                if [ -n "$found_tag" ]; then
                    found_bins_with_tag+=($found_tag)
                    if [ -n "$found_tag" ];then
                        execute python3 $script_dir/patch.py $rptarget/$file $TAG $rptarget
                    fi
                fi
            done
        fi
    done
 
    for file in ${found_bins_with_tag[@]}; do
        path=""
        path=$((chrpath -l "$file" 2>/dev/null || true)|grep "$TAG"|sed -nr "s|.*RUNPATH=$TAG(.*)|\1|p")
        if [ -n "$path" ]; then
            execute chrpath -r "$rptarget$path" $file >/dev/null
        fi
    done
    
    popd > /dev/null
}

write_httpd_conf(){
    [ ! -e "$rptarget" ] && error_menu "invalid target"
    sed -r -e "s|@@LLXAMP_BASEPATH@@|$rptarget|g" -e "s|@@LLXAMP_PORT@@|$DEFAULT_PORT|g" -e "s|@@LLXAMP_USER@@|$(whoami)|g" -e "s|@@LLXAMP_SERVERNAME@@|$(hostname)|g" "$TEMPLATES_DIR"/httpd.conf > $rptarget/httpd/conf/httpd.conf
    sed -r -e "s|@@LLXAMP_BASEPATH@@|$rptarget|g" -e "s|@@LLXAMP_SSL_PORT@@|$DEFAULT_SSL_PORT|g" -e "s|@@LLXAMP_USER@@|$(whoami)|g" -e "s|@@LLXAMP_SERVERNAME@@|$(hostname)|g" "$TEMPLATES_DIR"/httpd-ssl.conf > $rptarget/httpd/conf/httpd-ssl.conf
}

include_php_samples(){
    [ ! -e "$rptarget" ] && error_menu "invalid target"
    echo Including PHP sample pages
    cp "$TEMPLATES_DIR"/db.php $rptarget/httpd/htdocs/
    cp "$TEMPLATES_DIR"/info.php $rptarget/httpd/htdocs/
}

configure_mysql(){
    [ ! -e "$rptarget" ] && error_menu "invalid target"
    echo "Configuring MariaDB 5.5"
    mkdir -p $rptarget/mysql/conf
    mkdir -p $rptarget/mysql/temp
    mkdir -p $rptarget/mysql/var/mysql
    mkdir -p $rptarget/mysql/var/log
    sed -r "s|@@LLXAMP_BASEPATH@@|$rptarget/mysql|g" "$TEMPLATES_DIR"/my.cnf > $rptarget/mysql/conf/my.cnf
}

configure_mysql2(){
    [ ! -e "$rptarget" ] && error_menu "invalid target"
    echo Installing initial database
    execute_silent $rptarget/mysql/scripts/mysql_install_db --basedir=$rptarget/mysql --datadir=$rptarget/mysql/data --no-defaults --user=$(whoami)
    echo Starting database
    execute_silent bash $startup_scripts/llxamp-start-mysql
    while ! $rptarget/mysql/bin/mysql --defaults-file=$rptarget/mysql/conf/my.cnf --user=root -e 'status' > /dev/null 2>&1; do
        sleep 1
    done
    echo Creating test table
    execute_silent $rptarget/mysql/bin/mysql --defaults-file=$rptarget/mysql/conf/my.cnf --user=root < "$TEMPLATES_DIR"/create_table.sql
    echo Securing Mysql installation
    execute_silent $rptarget/mysql/bin/mysql --defaults-file=$rptarget/mysql/conf/my.cnf --user=root < "$TEMPLATES_DIR"/secure_installation.sql
    echo Stopping database
    execute bash $startup_scripts/llxamp-stop-mysql
}

write_start_scripts(){
    [ ! -e "$rptarget" ] && error_menu "invalid target"
    [ ! -e "$startup_scripts" ] && mkdir -p "$startup_scripts"

    echo Writting start/stop scripts into "$rptarget"
    
    for script in "$TEMPLATES_DIR"/llxamp-*; do
        sed -r -e "s|@@LLXAMP_BASEPATH@@|$rptarget|g" -e "s|@@LLXAMP_PORT@@|$DEFAULT_PORT|g" -e "s|@@LLXAMP_SSL_PORT@@|$DEFAULT_SSL_PORT|g" "$script" > "$startup_scripts/$(basename $script)"
        chmod +x "$startup_scripts/$(basename $script)"
    done
}

create_target_dir(){
    pkill -9 -f httpd > /dev/null 2>&1
    pkill -9 -f mysqld > /dev/null 2>&1
    if [ ! -e "$rptarget" ]; then
        mkdir -p "$rptarget" ||  error_menu "Invalid parameter '$target'"
    fi
    mkdir -p $HOME/.llxamp/{work,upper}
    if [ -e "$rptarget/mysql/data" ]; then
        rm -rf "$rptarget/mysql/data"
    fi
}

test_install_pack(){
    [ ! -e "$rpfile_pack" ] && error_menu "invalid install-pack"
    echo Testing archive "$rpfile_pack"
    tmpfile=$(execute_to_tempfile tar -ztf "$rpfile_pack")
    need="./build-tag ./httpd ./php ./mysql ./httpd/htdocs/phpMyAdmin"
    for n in $need; do
        if grep -s $n $tmpfile > /dev/null 2>&1; then
            echo "$(basename $n) found!" 
        else 
            error_menu "$(basename $n) not found!"
        fi
    done
}

decompress_pack(){
    [ ! -e "$rptarget" -o ! -e "$rpfile_pack" ] && error_menu "invalid target or install-pack"
    echo "Decompressing archive into '$rptarget'"
    # execute tar -zxf "$rpfile_pack" -C "$rptarget"
    mounted=$(findmnt -l -o TARGET | grep "$rptarget")
    if [ -n "$mounted" ];then
        fusermount -u "$rptarget"
        [ -e "$HOME/.llxamp/upper" ] && rm -rf $HOME/.llxamp/upper
        mkdir -p $HOME/.llxamp/upper
    fi
    mounted=$(findmnt -l -o TARGET | grep "$rptarget")
    if [ -z "$mounted" ];then
        set -e
        if [ -e "/usr/lib/llxamp/pack" -a -e "$HOME/.llxamp/upper" -a -e "$HOME/.llxamp/work" ]; then
            fuse-overlayfs -olowerdir=/usr/lib/llxamp/pack,upperdir=$HOME/.llxamp/upper,workdir=$HOME/.llxamp/work,squash_to_uid=$(id -u),squash_to_gid=$(id -g) "$rptarget"
        else
            echo "Can't mount overlay"
            exit 1
        fi
        set +e
    fi
}

read_tag(){
    [ ! -e "$rptarget" ] && error_menu "invalid target"
    echo "Reading tag"
    TAG=$(cat "$rptarget/build-tag")
    [ -z "$TAG" ] && error_menu "Empty tag"
    rm "$rptarget/build-tag"
}

configure_user_path(){
    echo "Configuring user path"
    if ! grep -s 'LLXAMP_PATH' $HOME/.bashrc > /dev/null 2>&1; then
        echo "LLXAMP_PATH=\"$startup_scripts\"" >> $HOME/.bashrc
        echo 'export PATH="$LLXAMP_PATH:$PATH"' >> $HOME/.bashrc
    fi
}

gen_openssl_certs(){
    [ ! -e "$rptarget" ] && error_menu "invalid target"
    echo Generating OpenSSL certificates
    execute_silent openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout "$rptarget"/httpd/conf/server.key -out "$rptarget"/httpd/conf/server.crt -subj "/C=XX/ST=StateName/L=CityName/O=CompanyName/OU=CompanySectionName/CN=CommonNameOrHostname"
}

print_info(){
    echo Finished!
    echo
    echo 'Start services with:'
    echo '  $ llxamp-start'
    echo 'View initial page served with:'
    echo '  $ llxamp-open-browser'
    echo 'View with SSL phpMyAdmin initial page with:'
    echo '  $ llxamp-open-browser-ssl /phpMyAdmin/index.php  #(default_username=root, default_root password=root)'
    echo 'Stop services with:'
    echo '  $ llxamp-stop'
    echo 'View more scripts pressing bash autocompletion keys:'
    echo '  $ llxamp<TAB_KEY><TAB_KEY>'
    echo
}
# MAIN EXECUTION

script_dir=$( cd -- "$( dirname -- $(realpath -e "${BASH_SOURCE[0]}") )" &> /dev/null && pwd )
program=$(basename "${BASH_SOURCE[0]}")
args="$@"
nargs=$#
TEMPLATES_DIR=${TEMPLATES_DIR:=$script_dir/templates}
file_pack=
target=
forced=
while test -n "$1"; do
    param=$1
    case "$param" in
        -p)
            shift
            [ -n "$1" -a "${1:0:1}" != "-" -a -f "$1" ] && file_pack="$1" || help_menu
        ;;
        -t)
            shift
            [ -n "$1" -a "${1:0:1}" != "-" ] && target="$1" || help_menu
        ;;
        -f)
            forced="yes"
        ;;
        -h)
            help_menu
            exit 0
        ;;
        *)
            help_menu
            exit 1
        ;;
    esac
    shift
done

file_pack=${file_pack:=$INSTALL_PACK_DIR/$PACKNAME}
file_pack=${file_pack:=/tmp/llxamp-install-pack/install-pack.tgz}
rpfile_pack=
if [ -e "$file_pack" ]; then
    rpfile_pack=$(execute realpath "$file_pack")
fi

target=${target:=$TARGET_DIR}
target=${target:=$HOME/llxamp}
rptarget=$(execute realpath "$target")

if [ -e "$rptarget" -a -z "$forced" ]; then
    error_menu "'$rptarget' exists, must be non-existent directory"
fi

startup_scripts="$rptarget/scripts"

if [ ! -e "/usr/lib/llxamp/pack" ]; then
    if [ -z "$rpfile_pack" -o ! -e "$rpfile_pack" ]; then
        llxamp-download-install-pack || error_menu "Invalid pack file"
        [ -e "/tmp/llxamp-install-pack/install-pack.tgz" ] && rpfile_pack="/tmp/llxamp-install-pack/install-pack.tgz"
    fi
fi

#test_install_pack
create_target_dir
decompress_pack
read_tag
make_change_text 
make_change_bin
write_httpd_conf
include_php_samples
configure_mysql
write_start_scripts
configure_mysql2
configure_user_path
gen_openssl_certs
print_info

source $HOME/.bashrc
